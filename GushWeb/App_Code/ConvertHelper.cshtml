@using GushLibrary.Models
@helper AmplitudeConvert(decimal? closed, decimal? price)
{
    if (closed.HasValue && closed != 0 && price.HasValue && price != 0)
    {
        <font color=@(price<closed?"green":"red")>@String.Format("{0:P}", price / closed - 1)</font>
        //@:%
    }
    else
    {
        @String.Empty
    }
}

@helper AmplitudeConvert(decimal? val, decimal offset = 0)
{
    if (val >= offset)
    {
        <font color="red">@String.Format("{0:P}", val / 100)</font>
    }
    else if (val < offset)
    {
        <font color="green">@String.Format("{0:P}", val / 100)</font>
    }
}

@helper ColorConvert(decimal? val, decimal offset = 0)
{
    if (val >= offset)
    {
        <font color="red">@val</font>
    }
    else if (val < offset)
    {
        <font color="green">@val</font>
    }
}

@helper ForceConvert(ForceState? state)
{
    switch (state)
    {
        case ForceState.主力放量买入:
            <font color="red">@ForceState.主力放量买入.ToString()</font>
            break;
        case ForceState.主力放量卖出:
            <font color="green">@ForceState.主力放量卖出.ToString()</font>
            break;
        case ForceState.主力缩量买入:
            <font color="red">@ForceState.主力缩量买入.ToString()</font>
            break;
        case ForceState.主力缩量卖出:
            <font color="green">@ForceState.主力缩量卖出.ToString()</font>
            break;
        case ForceState.散户放量买入:
            <font color="red">@ForceState.散户放量买入.ToString()</font>
            break;
        case ForceState.散户放量卖出:
            <font color="green">@ForceState.散户放量卖出.ToString()</font>
            break;
        case ForceState.散户缩量买入:
            <font color="red">@ForceState.散户缩量买入.ToString()</font>
            break;
        case ForceState.散户缩量卖出:
            <font color="green">@ForceState.散户缩量卖出.ToString()</font>
            break;
        case ForceState.Unknow:
        default:
            @String.Empty
            break;
    }
}